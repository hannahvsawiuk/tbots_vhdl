-- *******************************************************************************************************************
-- Purpose of the ClockGen entity is to generate 5 clock signals and a logic ready signal 
-- Specifically, 1MHz, 8MHz, 10MHz (x2), and 80MHz clocks are generated
-- The clocks are generated by taking in an 8MHz oscillation from an external source 
-- The outputs of this entity are used by the files in 'common' folder. 
--	There are 1MHz, 8MHz, 10MHz (x2), and 80MHz clocks

-- libraries
library ieee;
library unisim;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;
use unisim.vcomponents.all;
use work.types.all;

-- *******************************************************************************************************************
-- purpose	: define the entity, the entity's ports, and the port types
-- I/O		
--	Input	: 
-- 			- Oscillator = an 8MHz oscillation
-- 			- Input from the external oscillator is 50MHz
-- 			- From .ucf file: "timespec "TSOscillator" = PERIOD "Oscillator" 125 ns INPUT_JITTER 6.875 ps"
-- 			- 125ns --> 8MHz oscillation from the oscillation_pin
-- 	Outputs	: ClockXMHz = clock
-- 		      Ready 	= logical operator used to report to the higher level (top entity) whether all clocks are ready to use
-- *******************************************************************************************************************
entity ClockGen is
	port(
		Oscillator : in std_ulogic;
		Clock1MHz : buffer std_ulogic;
		Clock8MHz : buffer std_ulogic;
		Clock10MHz1 : buffer std_ulogic;
		Clock10MHzI : buffer std_ulogic;
		Clock80MHz : buffer std_ulogic;
		Ready : buffer boolean);
end entity ClockGen;

-- *******************************************************************************************************************
-- purpose	: define the behaviour of the ClockGen entity (the architecture)
-- info		:
-- 			- architecture blocks are like always blocks in Verilog
-- 			- statements in architecture blocks are not necessarily sequential: the behaviour is defined by data dependecies
-- *******************************************************************************************************************
architecture Behavioural of ClockGen is
	-- signal declarations
	signal OscillatorBuffered 			: std_ulogic;
	signal PLLInputClock 				: std_ulogic;
	signal StepUpMMCMLocked 			: std_ulogic;
	signal PLLReset 					: std_ulogic;
	signal PLLOutputs 					: std_ulogic_vector(0 to 5);
	signal PLLFeedbackClock 			: std_ulogic;
	signal PLLLocked 					: std_ulogic;
	signal BufferedPLLOutputs 			: std_ulogic_vector(PLLOutputs'range);
	signal StepDownMMCMFeedback 		: std_ulogic;
	signal StepDownMMCMFeedbackBuffered : std_ulogic;
	signal StepDownMMCMReset 			: std_ulogic;
	signal StepDownMMCMOut 				: std_ulogic;
	signal StepDownMMCMLocked 			: std_ulogic;
	signal Clock1MHzTemp 				: std_ulogic;
begin
	-- IBUFG = global input clock buffer
	InBufferG : IBufG
	port map(
		I => Oscillator,
		O => OscillatorBuffered);
	
	-- Use the MMCM advanced primitives to configure a 40MHz clock
	-- This 40MHz signal is fed into a PLL block to generate the 8,10, and 80MHz clocks
	StepUpMMCM : MMCME2_ADV
	generic map (
		CLKIN_PERIOD => 1.0e9 / 8.0e6, 	-- 8MHz
		CLK_FEEDBACK => "NONE",
		CLKFX_MULTIPLY => 5, 			-- 8MHz * 5 = 40MHz
		CLKFX_DIVIDE => 1
	) 									-- don't need a semi
	port map (
		CLKIN1 => OscillatorBuffered,
		RST => '0',
		CLKFX => PLLInputClock,
		 => 
		LOCKED => StepUpMMCMLocked
	)

	-- Status[2] 
	-- CLKFX or CLKFX180 output stopped indicator. Held in reset until the LOCKED output is asserted.
	-- 0: CLKFX and CLKFX180 outputs are toggling
	-- 1: CLKFX and CLKFX180 outputs are not toggling, even though the LOCKED output can still be High. 

	-- Locked
	-- 0: DCM is attempting to lock onto CLKIN frequency. DCM clock outputs are not valid
	-- 1: DCM is locked onto CLKIN frequency. DCM clock outputs are valid

	-- PLL RST is an active HIGH asynchronous reset
	-- PLL will synchronously re-enable itself when this signal is released
	-- A reset is required when the input clock conditions change
	PLLReset <=  or not StepUpMMCMLocked;



end